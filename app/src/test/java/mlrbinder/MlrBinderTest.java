/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mlrbinder;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Random;
import java.util.logging.Logger;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import mlrbinder.verb.Option;
import mlrbinder.verb.Verb;

class MlrBinderTest {
	private static Logger logger = Logger.getLogger(MlrBinderTest.class.getName());

	static {
		// must set before the Logger
		String path = MlrBinderTest.class.getClassLoader().getResource("logging.properties").getFile();
		System.setProperty("java.util.logging.config.file", path);
	}

	@Test
	@DisplayName("mlrPath not nullable test")
	void mlrPathNotNullableTest() {
		MlrBinder mlr = new MlrBinder();
		assertThrows(IllegalArgumentException.class, () -> {
			mlr.toString();
		});
	}

	@Test
	@DisplayName("mlrPath not nullable test")
	void workingPathNullableTest() {
		MlrBinder mlr = new MlrBinder("mlrPath");
		assertThrows(IllegalArgumentException.class, () -> {
			mlr.toString();
		});
	}

	@Test
	void pathTest() {
		String mlrPath = "mlr executable";
		logger.info("mlrPath=" + mlrPath);
		MlrBinder mlr = new MlrBinder().mlrPath(mlrPath);
		assertEquals(mlrPath, mlr.getMlrPath());
	}

	@Test
	@DisplayName("added flags order")
	void flagsTest() {
		int cntOfFlags = new Random().nextInt(10);
		logger.info("cntOfFlags=" + cntOfFlags);
		MlrBinder mlr = new MlrBinder();
		for(int i = 0 ; i < cntOfFlags ; i++) {
			Flag flag = new Flag("flag" + i);
			mlr.flag(flag);
			assertEquals(mlr.getFlags().get(i),flag);
		}
	}

	@Test
	@DisplayName("added flags then toString test")
	void flagsToStringTest() {
		int cntOfFlags = new Random().nextInt(10);
		logger.info("cntOfFlags=" + cntOfFlags);
		MlrBinder mlr = new MlrBinder("mlrPath", "workingPath");
		String toStringResult = "mlrPath";
		for(int i = 0 ; i < cntOfFlags ; i++) {
			Flag flag = new Flag("flag" + i);
			mlr.flag(flag);
			toStringResult += " " + flag;
		}
		logger.info("mlr.toString()=" + mlr.toString());
		assertEquals(mlr.toString(), toStringResult);
	}

	@Test
	@DisplayName("added verbs order")
	void verbsTest() {
		int cntOfVerbs = new Random().nextInt(10);
		logger.info("cntOfVerbs=" + cntOfVerbs);
		MlrBinder mlr = new MlrBinder();
		for(int i = 0 ; i < cntOfVerbs ; i++) {
			Verb verb = new Verb("verb" + i);
			mlr.verb(verb);
			assertEquals(mlr.getVerbs().get(i), verb);
		}
	}

	@Test
	@DisplayName("added verbs then toString test")
	void verbsToStringTest() {
		int cntOfVerbs = new Random().nextInt(10);
		logger.info("cntOfVerbs=" + cntOfVerbs);
		MlrBinder mlr = new MlrBinder("mlrPath", "workingPath");
		String toStringResult = "mlrPath";
		for(int i = 0 ; i < cntOfVerbs ; i++) {
			Verb verb = new Verb("verb" + i);
			verb.isConsecutive(i > 0);
			mlr.verb(verb);
			toStringResult += " " + verb;
		}
		logger.info("mlr.toString()=" + mlr.toString());
		assertEquals(mlr.toString(), toStringResult);
	}

	@Test
	@DisplayName("added files order")
	void filesTest() {
		int cntOfFiles = new Random().nextInt(10);
		logger.info("cntOfFiles=" + cntOfFiles);
		MlrBinder mlr = new MlrBinder();
		for(int i = 0 ; i < cntOfFiles ; i++) {
			String fileName = "file" + i;
			mlr.file(fileName);
			assertEquals(mlr.getFileNames().get(i), fileName);
		}
	}

	@Test
	@DisplayName("added files then toString test")
	void filesToStringTest() {
		int cnt = new Random().nextInt(10);
		logger.info("cnt=" + cnt);
		MlrBinder mlr = new MlrBinder("mlrPath", "workingPath");
		String toStringResult = "mlrPath";
		for(int i = 0 ; i < cnt ; i++) {
			String fileName = "fileName" + i;
			mlr.file(fileName);
			toStringResult += " " + fileName;
		}
		logger.info("mlr.toString()=" + mlr.toString());
		assertEquals(toStringResult, mlr.toString());
	}

	@Test
	@DisplayName("added files, verbs and files then toString test")
	void flagsVerbsFilesToStringTest() {
		int cntOfFlags = new Random().nextInt(10);
		logger.info("cntOfFlags=" + cntOfFlags);
		MlrBinder mlr = new MlrBinder("mlrPath", "workingPath");
		String toStringResult = "mlrPath";
		for(int i = 0 ; i < cntOfFlags ; i++) {
			Flag flag = new Flag("--flag" + i);
			flag.object(new Object("obj" + i));
			mlr.flag(flag);
			toStringResult += " " + flag;
		}

		int cntOfVerbs = new Random().nextInt(10);
		logger.info("cntOfVerbs=" + cntOfVerbs);
		for(int i = 0 ; i < cntOfVerbs ; i++) {
			Verb verb = new Verb("verb" + i);
			verb.isConsecutive(i > 0);
			verb.option(
				new Option(
					new Flag("--flag" + i).object(
						new Object("object" + i)
					)
				)
			);
			mlr.verb(verb);
			toStringResult += " " + verb;
		}

		int cnt = new Random().nextInt(10);
		logger.info("cnt=" + cnt);
		for(int i = 0 ; i < cnt ; i++) {
			String fileName = "fileName" + i;
			mlr.file(fileName);
			toStringResult += " " + fileName;
		}

		logger.info("mlr.toString()=" + mlr.toString());
		assertEquals(toStringResult, mlr.toString());
	}

	@Test
	public void runTest() {
		//TODO 테스트해야
	}
}
